global:
  tld: cloud.sap
  region: local
# specify the k8s keystone namespace if it differs from the current chart
  keystoneNamespace: monsoon3
  imageNamespace: monsoon
  user_suffix: ""
  master_password: ""
  pgbouncer:
    enabled: false
    prometheus: false
    config:
      stats_users: "stats_user"
      admin_users: "admin_user"
      autodb_idle_timeout: 3600
      max_client_conn: 16384
      reserve_pool_size: 4
      min_pool_size: 1
      default_pool_size: 4
      max_db_connections: 8
      server_idle_timeout: 10
      server_check_delay: 30
      unix_socket_dir: "/tmp"
      listen_addr: "0.0.0.0"
      listen_port: 6543
      listen_backlog: 256
      auth_type: "md5"
      server_tls_sslmode: "prefer"
      tcp_keepalive: 1
      tcp_keepcnt: 10
      tcp_keepidle: 5
      tcp_keepintvl: 5
      ignore_startup_parameters: "extra_float_digits"
      log_connections: 0
      log_disconnections: 0
      pool_mode: "transaction"
      application_name_add_host: 1

custom_configmap: false

## Variables for postgres configuration file
extensions:
  pg_stat_statements:
    max: 1000
    track: all

# The default postgres settings are too conservative for our use case
shared_buffers: "4GB"
temp_buffers: "32MB"
work_mem: "64MB"
maintenance_work_mem: "256MB"
# Ideally we would want to run 'ulimit -s' to determine the optimal max_stack_depth value
max_stack_depth: "8MB"
effective_cache_size: "16GB"
# We want autovacuum to run more often
# This will make each run finish faster
autovacuum_analyze_scale_factor: 0.02
autovacuum_vacuum_scale_factor: 0.01


## postgres image repository
image: "postgres"
## postgres image version
## ref: https://hub.docker.com/r/library/postgres/tags/
##
imageTag: "9.5.4"

## Specify a imagePullPolicy
## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
##
# imagePullPolicy:

## Create a database user
## Default: postgres
postgresUser: postgres
## Default: random 10 character string
# postgresPassword:

## Create a database
## Default: the postgres user
# postgresDatabase:

# custom db-init.sh
# dbInit: name of a configmap that provides the db-init.sh script

# custom db-maintain.sh
# dbMaintain: name of a configmap that provides the db-maintain.sh script

hba_cidr: 0.0.0.0/0
auth_method: password

## Persist data to a persitent volume
persistence:
  enabled: false
  accessMode: ReadWriteMany
  size: 10Gi
  # Re-use existing (unmanged) PVC
  # existingClaim: claimName

replicas: 1

pod:
  replicas:
    pgbouncer: 3
  lifecycle:
    upgrades:
      deployments:
        revision_history: 5
        pod_replacement_strategy: "RollingUpdate"
        rolling_update:
          max_unavailable: 1
          max_surge: 0

upgrades:
  revisionHistory: 3
  podReplacementStrategy: Recreate

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  enabled: false
  limits:
    memory: 256Mi
    cpu: 500m
  requests:
    memory: 256Mi
    cpu: 500m

metrics:
  enabled: false
  image: "wrouesnel/postgres_exporter"
  imageTag: v0.4.6
  imagePullPolicy: IfNotPresent

  port: 9187
  customMetrics:
    pg_database:
      query: "SELECT d.datname AS datname, CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') THEN pg_catalog.pg_database_size(d.datname) ELSE 0 END AS size_bytes FROM pg_catalog.pg_database d where datname not in ('template0', 'template1', 'postgres')"
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of the database"
        - size_bytes:
            usage: "GAUGE"
            description: "Size of the database in bytes"
  resources:
    enabled: false
    limits:
      memory: 256Mi
      cpu: 100m
    requests:
      memory: 256Mi
      cpu: 100m

backup:
  enabled: false
  image: monsoon/backup-tools
  imageTag: v0.5.15
  interval_full: 1 hours
#  os_auth_url: DEFINED-IN-REGION-SECRETS
#  os_region_name: DEFINED-IN-REGION-SECRETS
  os_password: DEFINED-IN-REGION-SECRETS
  os_username: db_backup
  os_user_domain: Default
  os_project_name: master
  os_project_domain: ccadmin

pgbouncer:
  config: {}
