global:
  # The OpenStack region.
  region:

  # The TLD as used in the URL.
  domain:

# The repository and tag of the Prometheus Alertmanager image.
image:
  repository: prom/alertmanager
  tag: v0.19.0

# Mandatory name for this Alertmanager.
name:

# Retention for the Alertmanager. Only stores silences.
# Valid units are ms|s|m|h.
# 168h = 7 days.
retention: 168h

# AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
additionalPeers: []

# Alertmanager configuration.
# See https://prometheus.io/docs/alerting/configuration/#configuration-file .
config: {}

# Pass Alertmanager configuration through Helm templating.
tplConfig: false

# Provide Alertmanager configuration vi an existing secret in the same namespace.
# The secret must be named alertmanager-$name .
useExistingSecret: false

# Additional notification templates.
# Slack and Pagerduty templates are already part of this chart and can be found in the notification-templates folder, which is mounted to /etc/alertmanager/
templateFiles: {}

# List of configmaps in the same namespace as the Alertmanager that should be mounted to /etc/alertmanager/configmaps/< name of configmap > .
configMaps: []
# - < name of configmap >

# List of secrets in the same namespace as the Alertmanager that should be mounted to /etc/alertmanager/secrets/< name of secret > .
secrets: []
# - < name of secret >

# Optional ingress for this Alertmanager.
ingress:
  enabled: false

  # The name is used to generate the external URL Alertmanager will be available under: <host>.<region>.<domain>.
  # If the ingress is enabled, it's also used for the ingress host.
  host:

  # Per default the host name is generated following the pattern `<host>.<region>.<domain>.
  # However the full host name can be set explicitly via the hostNameOverride parameter.
  # hostNameOverride: something.subDomain.tld

  # Automate certificate management via vice-president.
  vicePresident: true

  # Automate DNS management via disco.
  disco: true

  # Client certificate authentication on ingress level.
  authentication:
    enabled: true

    # The key (<namespace>/<name>) of the secret containing the CA certificate (`ca.crt`) that is enabled to authenticate against this Ingress.
    authTLSSecret: kube-system/ingress-cacrt

    # The validation depth between the provided client certificate and the certification authority chain.
    authTLSVerifyDepth: 3

    # Enables verification of client certificates.
    authTLSVerifyClient: on

  # Additional annotations for the ingress.
  annotations: {}

# Enable persistent storage.
# If disabled, created Silences will be stored in memory and lost on restart.
persistence:
  enabled: true

  # Optional name of the PVC. Default: < .Values.name >
  # name:

  # Access mode of the PVC.
  accessMode: ReadWriteOnce

  # Size of the PVC.
  size: 10Gi

  # Label selector to be be applied to the PVC.
  selector: {}

# The log level of the Alertmanager.
logLevel: info

# Kubernetes resource requests and limits for this Alertmanager instance.
# See: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container .
resources:
  requests:
    cpu: 4
    memory: 8Gi

# A security context defines privilege and access control settings for a Pod or Container.
# See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context .
securityContext:
  fsGroup: 0
  runAsUser: 0

# Only one alertmanager instance per node.
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app: prometheus-alertmanager
