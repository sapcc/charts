kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ template "cockroachdb.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    helm.sh/chart: {{ template "cockroachdb.chart" . }}
    app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
  {{- with .Values.deployment.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.deployment.replicas | int64 }}
  strategy:
    type: {{ .Values.deployment.updateStrategy.type }}
    {{ if eq .Values.deployment.updateStrategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.deployment.budget.maxUnavailable }}
  {{ end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
    {{- with .Values.deployment.labels }}
      {{- toYaml . | nindent 6 }}
    {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
      {{- with .Values.deployment.labels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.labels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.deployment.annotations }}
      annotations: {{- toYaml . | nindent 8 }}
    {{- end }}
    spec:
    {{- if or .Values.image.credentials (and .Values.tls.enabled .Values.tls.init.image.credentials (not .Values.tls.certs.provided)) }}
      imagePullSecrets:
      {{- if .Values.image.credentials }}
        - name: {{ template "cockroachdb.fullname" . }}.db.registry
      {{- end }}
      {{- if and .Values.tls.enabled .Values.tls.init.image.credentials (not .Values.tls.certs.provided) }}
        - name: {{ template "cockroachdb.fullname" . }}.init-certs.registry
      {{- end }}
    {{- end }}
    {{- if .Values.tls.enabled }}
      serviceAccountName: {{ template "cockroachdb.tls.serviceAccount.name" . }}
      {{- if not .Values.tls.certs.provided }}
      initContainers:
        # The init-certs container sends a CSR (certificate signing request) to
        # the Kubernetes cluster.
        # You can see pending requests using:
        #   kubectl get csr
        # CSRs can be approved using:
        #   kubectl certificate approve <csr-name>
        #
        # All addresses used to contact a Node must be specified in the
        # `--addresses` arg.
        #
        # In addition to the Node certificate and key, the init-certs entrypoint
        # will symlink the cluster CA to the certs directory.
        - name: init-certs
          image: "{{ .Values.tls.init.image.repository }}:{{ .Values.tls.init.image.tag }}"
          imagePullPolicy: {{ .Values.tls.init.image.pullPolicy | quote }}
          command:
            - /bin/ash
            - -ecx
            - >-
              /request-cert
              -namespace=${POD_NAMESPACE}
              -certs-dir=/cockroach-certs/
              -symlink-ca-from=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              -type=node
              -addresses=localhost,127.0.0.1,$(hostname -f),$(hostname -f|cut -f 1-2 -d '.'),{{ template "cockroachdb.fullname" . }}-public,{{ template "cockroachdb.fullname" . }}-public.$(hostname -f|cut -f 3- -d '.')
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: certs
              mountPath: /cockroach-certs/
      {{- end }}
    {{- end }}
    {{- if or .Values.deployment.nodeAffinity .Values.deployment.podAffinity .Values.deployment.podAntiAffinity }}
      affinity:
      {{- with .Values.deployment.nodeAffinity }}
        nodeAffinity: {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.deployment.podAffinity }}
        podAffinity: {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- if .Values.deployment.podAntiAffinity }}
        podAntiAffinity:
        {{- if .Values.deployment.podAntiAffinity.type }}
        {{- if eq .Values.deployment.podAntiAffinity.type "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: {{ .Values.deployment.podAntiAffinity.topologyKey }}
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
                  app.kubernetes.io/instance: {{ .Release.Name | quote }}
                {{- with .Values.deployment.labels }}
                  {{- toYaml . | nindent 18 }}
                {{- end }}
        {{- else if eq .Values.deployment.podAntiAffinity.type "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.deployment.podAntiAffinity.weight | int64 }}
              podAffinityTerm:
                topologyKey: {{ .Values.deployment.podAntiAffinity.topologyKey }}
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
                    app.kubernetes.io/instance: {{ .Release.Name | quote }}
                  {{- with .Values.deployment.labels }}
                    {{- toYaml . | nindent 20 }}
                  {{- end }}
        {{- end }}
        {{- else }}
          {{- toYaml .Values.deployment.podAntiAffinity | nindent 10 }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- if semverCompare ">=1.16-0" .Capabilities.KubeVersion.GitVersion }}
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: {{ template "cockroachdb.name" . }}
            app.kubernetes.io/instance: {{ .Release.Name | quote }}
          {{- with .Values.deployment.labels }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.deployment.topologySpreadConstraints }}
        maxSkew: {{ .maxSkew }}
        topologyKey: {{ .topologyKey }}
        whenUnsatisfiable: {{ .whenUnsatisfiable }}
      {{- end }}
    {{- end }}
    {{- with .Values.deployment.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.deployment.priorityClassName }}
      priorityClassName: {{ .Values.deployment.priorityClassName }}
    {{- end }}
    {{- with .Values.deployment.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}
      # No pre-stop hook is required, a SIGTERM plus some time is all that's
      # needed for graceful shutdown of a node.
      terminationGracePeriodSeconds: 60
      containers:
        - name: db
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          args:
            - shell
            - -ecx
            # The use of qualified `hostname -f` is crucial:
            # Other nodes aren't able to look up the unqualified hostname.
            #
            # `--join` CLI flag is hardcoded to exactly 3 Pods, because:
            # 2. At least one Pod in `--join` is enough to successfully
            #    join CockroachDB cluster and gossip with all other existing
            #    Pods, even if there are 3 or more Pods.
            # 3. It's harmless for `--join` to have 3 Pods even for 1-Pod
            #    clusters, while it gives us opportunity to scale up even if
            #    some Pods of existing cluster are down (for whatever reason).
            # See details explained here:
            # https://github.com/helm/charts/pull/18993#issuecomment-558795102
            - >-
              exec /cockroach/cockroach
            {{- if .Values.conf.join }}
              start --join=
                {{- join `,` .Values.conf.join -}}
            {{- end }}
              --advertise-host={{ template "cockroachdb.fqdn" . }}
            {{- with index .Values.conf `cluster-name` }}
              --cluster-name={{ . }}
            {{- if index $.Values.conf `disable-cluster-name-verification` }}
              --disable-cluster-name-verification
            {{- end }}
            {{- end }}
              --logtostderr={{ .Values.conf.logtostderr }}
            {{- if .Values.tls.enabled }}
              --certs-dir=/cockroach/cockroach-certs/
            {{- else }}
              --insecure
            {{- end }}
            {{- with .Values.conf.attrs }}
              --attrs={{ join `:` . }}
            {{- end }}
              --http-port={{ index .Values.conf `http-port` | int64 }}
              --port={{ .Values.conf.port | int64 }}
              --cache={{ .Values.conf.cache }}
            {{- with index .Values.conf `max-disk-temp-storage` }}
              --max-disk-temp-storage={{ . }}
            {{- end }}
            {{- with index .Values.conf `max-offset` }}
              --max-offset={{ . }}
            {{- end }}
              --max-sql-memory={{ index .Values.conf `max-sql-memory` }}
            {{- with .Values.conf.locality }}
              --locality={{ . }}
            {{- end }}
            {{- with index .Values.conf `sql-audit-dir` }}
              --sql-audit-dir={{ . }}
            {{- end }}
            {{- range .Values.deployment.args }}
              {{ . }}
            {{- end }}
          env:
            - name: COCKROACH_CHANNEL
              value: kubernetes-helm
          {{- with .Values.deployment.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: grpc
              containerPort: {{ .Values.conf.port | int64 }}
              protocol: TCP
            - name: http
              containerPort: {{ index .Values.conf `http-port` | int64 }}
              protocol: TCP
          volumeMounts:
            - name: datadir
              mountPath: /cockroach/cockroach-data/
          {{- if .Values.tls.enabled }}
            - name: certs
              mountPath: /cockroach/cockroach-certs/
          {{- end }}
          {{- range .Values.deployment.secretMounts }}
            - name: {{ printf "secret-%s" . | quote }}
              mountPath: {{ printf "/etc/cockroach/secrets/%s" . | quote }}
              readOnly: true
          {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            {{- if .Values.tls.enabled }}
              scheme: HTTPS
            {{- end }}
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health?ready=1
              port: http
            {{- if .Values.tls.enabled }}
              scheme: HTTPS
            {{- end }}
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 2
        {{- with .Values.deployment.resources }}
          resources: {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- if eq ( include "cockroachdb.fqdn" . ) ( first .Values.conf.join ) }}
        - name: cluster-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - >-
              while true; do
              initOUT=$(set -x;
              /cockroach/cockroach init
              {{- if .Values.tls.enabled }}
              --certs-dir=/cockroach-certs/
              {{- else }}
              --insecure
              {{- end }}
              {{- with index .Values.conf "cluster-name" }}
              --cluster-name={{.}}
              {{- end }}
              --host=127.0.0.1:{{ .Values.service.ports.grpc.internal.port | int64 }}
              2>&1);
              initRC="$?";
              echo $initOUT;
              [[ "$initRC" == "0" ]] && sleep infinity;
              [[ "$initOUT" == *"cluster has already been initialized"* ]] && sleep infinity;
              sleep 5;
              done
        {{- with .Values.deployment.resources }}
          resources: {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- end }}
      volumes:
        - name: datadir
        {{- if .Values.storage.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.storage.existingClaim | default (include "cockroachdb.fullname" .) }}
        {{- else if .Values.storage.hostPath }}
          hostPath:
            path: {{ .Values.storage.hostPath | quote }}
        {{- else }}
          emptyDir: {}
        {{- end }}
      {{- if .Values.tls.enabled }}
        - name: certs
          {{- if .Values.tls.certs.provided }}
          {{- if .Values.tls.certs.tlsSecret }}
          projected:
            sources:
            - secret:
                name: {{ .Values.tls.certs.nodeSecret }}
                items:
                - key: ca.crt
                  path: ca.crt
                  mode: 0400
                - key: tls.crt
                  path: node.crt
                  mode: 0400
                - key: tls.key
                  path: node.key
                  mode: 0400
          {{- else }}
          secret:
            secretName: {{ .Values.tls.certs.nodeSecret }}
            defaultMode: 0400
          {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- end }}
      {{- range .Values.deployment.secretMounts }}
        - name: {{ printf "secret-%s" . | quote }}
          secret:
            secretName: {{ . | quote }}
      {{- end }}
