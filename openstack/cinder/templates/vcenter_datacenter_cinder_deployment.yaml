{{- if or (.Capabilities.APIVersions.Has "vcenter-operator.stable.sap.cc/v1") (.Values.isImageTransportTemplating | default false) }}
apiVersion: vcenter-operator.stable.sap.cc/v1
kind: VCenterTemplate
metadata:
  name: 'vcenter-datacenter-cinder-deployment'
options:
  scope: 'datacenter'
  jinja2_options:
    variable_start_string: '{='
    variable_end_string: '=}'
template: |
  kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: cinder-volume-vmware-{= name =}
    labels:
      system: openstack
      type: backend
      component: cinder
  spec:
    replicas: 1
    revisionHistoryLimit: 5
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1
    selector:
      matchLabels:
          name: cinder-volume-vmware-{= name =}
    template:
      metadata:
        labels:
          application: cinder
          component: volume-vmware
          name: cinder-volume-vmware-{= name =}
      spec:
        hostname: cinder-volume-vmware-{= name =}
{{ tuple "{= availability_zone =}" | include "kubernetes_pod_az_affinity" | indent 8 }}
        containers:
        - name: cinder-volume-vmware-{= name =}
          image: {{required ".Values.global.registry is missing" .Values.global.registry}}/loci-cinder:{{.Values.imageVersionCinderScheduler | default .Values.imageVersion | required "Please set cinder.imageVersion or similar" }}
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add: ["SYS_ADMIN"]
          command:
          - dumb-init
          - kubernetes-entrypoint
          env:
          - name: COMMAND
            value: 'cinder-volume'
          - name: NAMESPACE
            value: {= namespace =}
          {{- if .Values.sentry.enabled }}
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: sentry
                key: {{ .Chart.Name }}.DSN.python
          {{- end }}
          - name: PYTHONWARNINGS
            value: 'ignore:Unverified HTTPS request'
          - name: PGAPPNAME
            value: cinder-volume-vmware-{= name =}
          livenessProbe:
            exec:
              command: ["openstack-agent-liveness", "--component", "cinder", "--config-file", "/etc/cinder/cinder.conf"]
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 20
          {{- if .Values.pod.resources.volume }}
          resources:
{{ toYaml .Values.pod.resources.volume | indent 12 }}
          {{- end }}
          volumeMounts:
          - name: cinder-etc
            mountPath: /etc/cinder
          - name: sudoers
            mountPath: /etc
        volumes:
        - name: cinder-etc
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: cinder.conf
                  path: cinder.conf
                - key: policy.json
                  path: policy.json
                - key: rootwrap.conf
                  path: rootwrap.conf
                - key: volume.filters
                  path: rootwrap.d/volume.filters
                - key: logging.ini
                  path: logging.ini
                name: cinder-etc
            - configMap:
                items:
                - key: cinder-volume.conf
                  path: cinder-volume.conf
                name: volume-vmware-{= name =}
        - name: sudoers
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: sudoers
                  path: sudoers
                name: cinder-etc
{{- end }}
