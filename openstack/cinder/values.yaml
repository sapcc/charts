# Default values for cinder.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value
global:
  master_password: null
  dbUser: cinder

  hypervisors_vmware: []
  #  - name: DEFINED-IN-REGION-CHART
  #    username: DEFINED-IN-REGION-CHART
  #    password: DEFINED-IN-REGION-CHART
  #    host: DEFINED-IN-REGION-CHART
  #    availability_zone: DEFINED-IN-REGION-CHART
  volumes_netapp: []
  #  - name: DEFINED-IN-REGION-CHART
  #    username: DEFINED-IN-REGION-CHART
  #    password: DEFINED-IN-REGION-CHART
  #    host: DEFINED-IN-REGION-CHART
  #    vserver: DEFINED-IN-REGION-CHART
  #    availability_zone: DEFINED-IN-REGION-CHART
  volumes: []
  osprofiler: {}
  pgbouncer:
    enabled: false

osprofiler: {}

# imageVersion: null
# imageVersionCinderApi: null
# imageVersionCinderScheduler: null
# imageVersionCinderVolume: null

pod:
  replicas:
    api: 2
    scheduler: 1
  lifecycle:
    upgrades:
      deployments:
        revisionHistory: 5
        podReplacementStrategy: RollingUpdate
        rollingUpdate:
           maxUnavailable: 0
           maxSurge: 1

debug: "True"

sentry:
  enabled: true

dbName: cinder
dbPassword: null

port_metrics: 9102

backend_defaults:
  suppress_requests_ssl_warnings: True
  vmware_connection_pool_size: 10
  vmware_insecure: True
  vmware_storage_profile: cinder-vvol

cinderApiPortPublic: 443
cinderApiPortInternal: 8776
cinderApiPortAdmin: 8776

pgmetrics:
  name: cinder
  customMetrics:
    openstack_stuck_volumes:
      query: "SELECT host, project_id, id, display_name, availability_zone, status, COUNT(*) FILTER (WHERE updated_at < now() - interval '15 minutes') AS count_gauge, MAX(EXTRACT(epoch FROM now() - updated_at)) AS max_duration_gauge FROM volumes WHERE status IN ('attaching', 'deleting', 'detaching') GROUP BY host, availability_zone, volume_type_id, id, display_name, status, project_id"
      metrics:
        - host:
            usage: "LABEL"
            description: "Name of the host"
        - availability_zone:
            usage: "LABEL"
            description: "Availability Zone of the Volume"
        - project_id:
            usage: "LABEL"
            description: "Project ID"
        - status:
            usage: "LABEL"
            description: "Status of the volume"
        - id:
            usage: "LABEL"
            description: "Volume ID"
        - display_name:
            usage: "LABEL"
            description: "Name of the volume"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of volumes"
        - max_duration_gauge:
            usage: "GAUGE"
            description: "Maximum duration of state"
    openstack_volumes:
      query: "SELECT host, availability_zone, volume_type_id, project_id, status, attach_status, COUNT(*) AS count_gauge, SUM(size) size_gauge FROM volumes GROUP BY host, availability_zone, volume_type_id, project_id, status, attach_status"
      metrics:
        - host:
            usage: "LABEL"
            description: "Name of the host"
        - availability_zone:
            usage: "LABEL"
            description: "Availability Zone of the Volume"
        - volume_type_id:
            usage: "LABEL"
            description: "Type of the volume"
        - project_id:
            usage: "LABEL"
            description: "ID of the Project"
        - status:
            usage: "LABEL"
            description: "Status of the volume"
        - attach_status:
            usage: "LABEL"
            description: "Status of the attachment"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of volumes"
        - size_gauge:
            usage: "GAUGE"
            description: "Size of volumes"
    openstack_snapshots:
      query: "select snapshots.status, snapshots.project_id, volumes.host, COUNT(*) AS count_gauge, SUM(volume_size) size_gauge from snapshots join volumes on snapshots.volume_id=volumes.id GROUP BY snapshots.status, snapshots.project_id, volumes.host"
      metrics:
        - project_id:
            usage: "LABEL"
            description: "ID of the Project"
        - host:
            usage: "LABEL"
            description: "Name of the host"
        - status:
            usage: "LABEL"
            description: "Status of the Snapshot"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of Snapshots"
        - size_gauge:
            usage: "GAUGE"
            description: "Size of Snapshots"


postgresql:
  imageTag: '9.4.14'
  postgresDatabase: cinder
  postgresPassword: null
  dbInit: cinder-db-init
  dbMaintain: cinder-db-maintain
  pgbouncer:
    enabled: true
  persistence:
    enabled: true
    existingClaim: db-cinder-pvclaim
  backup:
    enabled: true
    metrics: true
    os_password: null
  resources:
    requests:
      cpu: "500m" # 1/2 cpu
      memory: "500Mi" # 350Mi high recorded

audit:
  enabled: false
  # how many messages to buffer before dumping to log (when rabbit is down or too slow)
  mem_queue_size: 1000
  record_payloads: false
  metrics_enabled: true

rabbitmq_notifications:
  name: cinder

logging:
    formatters:
        context:
            class: oslo_log.formatters.ContextFormatter
        default:
            format: "%(message)s"
    handlers:
        stdout:
            class: StreamHandler
            args: "(sys.stdout,)"
            formatter: context
        "null":
            class: logging.NullHandler
            args: "()"
            formatter: default
        sentry:
            class: raven.handlers.logging.SentryHandler
            level: ERROR
            args: "()"
    loggers:
        root:
            handlers: stdout, sentry
            level: WARNING
        cinder:
            handlers: stdout, sentry
            level: DEBUG
        taskflow:
            handlers: stdout, sentry
            level: DEBUG
        eventlet.wsgi.server:
            handlers: stdout, sentry
            level: INFO
        sqlalchemy:
            handlers: stdout, sentry
            level: WARNING
        suds:
            handlers: "null"
            level: ERROR

# cinder nanny
imageVersion_cinder_nanny: DEFINED-IN-REGION-CHART
nanny:
  enabled: False
  # run the pod with an infinite sleep loop for debugging
  debug: False
  # run the nanny every n minutes
  interval: 60
quota_sync:
  enabled: False
db_purge:
  enabled: False
  # purge deleted cinder entities older than n days
  older_than: 14
consistency:
  enabled: False
  # dry run mode, i.e. just check for consistency without fixing it
  dry_run: True
db_cleanup:
  enabled: False
  # dry run mode, i.e. just pretend to cleanup the entries
  dry_run: true
  # run the db cleanup every n minutes
  interval: 720
  # really delete entities after how many iterations
  iterations: 14

# openstack-watcher-middleware
watcher:
  enabled: true
