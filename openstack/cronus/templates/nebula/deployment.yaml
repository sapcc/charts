{{- if .Values.nebula.enabled }}
apiVersion: apps/v1
{{- if .Values.nebula.statefulSet.enabled }}
kind: StatefulSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: nebula-deployment
  {{- if .Values.nebula.annotations }}
  annotations:
    {{ toYaml .Values.nebula.annotations | indent 4 }}
  {{- end  }}
  {{- if .Values.nebula.labels }}
  labels:
    {{ toYaml .Values.nebula.labels | indent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.nebula.replicas }}
  {{- if .Values.nebula.statefulSet.enabled }}
  podManagementPolicy: {{ .Values.nebula.statefulSet.podManagementPolicy }}
  serviceName: nebula-service
  updateStrategy:
  {{- else }}
  strategy:
  {{- end }}
    type: {{ .Values.nebula.updateStrategy }}
  selector:
    matchLabels:
      app.kubernetes.io/name: nebula
      app.kubernetes.io/instance: nebula
  template:
    metadata:
      annotations:
        checksum/config: {{ include "cronus/templates/nebula/_config.yaml.tpl" . | sha256sum }}
      labels:
        app.kubernetes.io/name: nebula
        app.kubernetes.io/instance: nebula
    spec:
      serviceAccountName: nebula
      containers:
        - name: nebula
          image: "{{ .Values.nebula.image.name }}:{{ .Values.nebula.image.tag }}"
          imagePullPolicy: IfNotPresent
          args:
            - "-config=/nebula/config.yaml"
          volumeMounts:
            - name: nebula-config
              mountPath: "/nebula/config.yaml"
              subPath: config.yaml
          ports:
            - name: http
              containerPort: {{ .Values.nebula.http }}
              protocol: TCP
      volumes:
        - name: nebula-config
          secret:
            secretName: nebula-config
{{- end -}}
