replicaCount: 1
cronus:
  enabled: true
  cacheSize: 256
  http: 5000
  smtp: 1025
  debug: true
  tls: tls-secret
  image:
    name: cronus-repository
    pullPolicy: IfNotPresent
    tag: latest
    imagePullSecrets: []
  statefulSet:
    enabled: true
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1
nebula:
  enabled: true
  cacheSize: 512
  http: 1080
  debug: true
  image:
    name: nebula-repository
    pullPolicy: IfNotPresent
    tag: latest
    imagePullSecrets: []
  statefulSet:
    enabled: true
    podManagementPolicy: OrderedReady
    annotations: {}
    labels: {}
    headless:
      annotations: {}
      labels: {}
      servicePort: 80
  updateStrategy: RollingUpdate
  replicas: 1
  ingressAnnotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: 1800

config:
  ## keystone optional authentication methods, add in @SECRETS the relevant method
  keystone:
    # authUrl: https://identity
    # region: eu-de-2
    # endpointType: public
    # applicationCredentialID: application-credential-id
    # applicationCredentialSecret: application-credential-secret
    # applicationCredentialName: application-credential-name
    # projectID: project-id
    projectName: master
    projectDomainName: ccadmin
    # projectDomainID: project-domain-id
    userDomainName: Default
    # domainName: domain-name
    # domainID: domain-id
    username: cronus
    # password: # a password must be defined in ".Values.global.cronus_service_password"
    # userID: user-id
  group: service-group
  jira:
    endpoint: http://url-to
    username: jira-username
    password: jira-password
    serviceDeskID: 1
    requestTypeID: 2
    customFieldID: 3
    ticketSummaryTemplate: |
      Delete {{ $accountID }} account ID
    ticketDescriptionTemplate: |
      Please delete the {{ $accountID }} account ID
  multiCloud:
    endpoint: http://url-to
    username: service-username
    password: service-password
  serviceUsername: service-username
  servicePassword: service-password
  awsAccess: aws-access
  awsSecret: aws-secret
  technicalUsername: aws-username
  policyName: aws-policy
  iamPolicy: |
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "ses:*",
                ],
                "Resource": "*"
            }
        ]
    }
  forwardUserAgent: false
  billingCacheTTL: 24h
  barbicanCacheTTL: 15m
  technicalResponsible: technical-responsible@example
  accountStatusTimeout: 5m
  accountStatusPollDelay: 10s
  verifyEmailDomain: example.com
  verifyEmailSecret: domainkey
  useCaseDescription: SES account
  websiteURL: https://example.com
  allowedServices:
    email: email-region
  # the list of domains to be blocked by a proxy server on ses email identity create/delete actions
  blockedDomains:
    - example.com # the exact domain
    - .example.com # all subdomains
    - sub.example.com # the exact subdomain
  cronusPolicy:
    project_scope: project_id:%(project_id)s and (role:email_admin or role:email_user)
    domain_scope: domain_id:%(target.project.domain.id)s and (role:email_admin or role:email_user)
    # a policy to trigger a cache warmup
    warmup_projects_cache: role:resource_service
    cronus:usage_viewer: rule:project_scope or rule:domain_scope or role:cloud_email_admin or role:resource_service
    cronus:aws_proxy: rule:project_scope
    cronus:smtp_proxy: rule:project_scope
  nebulaPolicy:
    project_scope: project_id:%(project_id)s and role:email_admin
    domain_scope: domain_id:%(target.project.domain.id)s and role:cloud_email_admin
    cluster_scope: project_domain_name:ccadmin and project_name:cloud_admin
    cluster_or_domain_scope: rule:cluster_scope or rule:domain_scope
    nebula:admin: rule:project_scope or rule:cluster_or_domain_scope
    nebula:cloud_admin: rule:cluster_or_domain_scope
  cronusAuditSink:
    internalQueueSize: 20
    contentTypePrefixes:
      - application/x-www-form-urlencoded
      - application/json
      - application/x-amz-json-
      - text/xml
    maxContentLen: 1073741824
    debug: false
  nebulaAuditSink:
    internalQueueSize: 20
    contentTypePrefixes:
      - application/json
    maxContentLen: 1073741824
    debug: false

service:
  type: ClusterIP

# nginx values
ingress-nginx:
  tcp:
    465: ""
  controller:
    containerPort:
      http: 80
      https: 443
    service:
      annotations:
        disco: "true"
        disco/record: my-ingress.region.cloud.com.
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
      nodePorts:
        http: ""
        https: ""
        465-tcp: ""
    ingressClass: cronus-nginx
    admissionWebhooks:
      enabled: false
    customTemplate:
      configMapName: cronus-nginx-template
      configMapKey: nginx.tmpl
    extraVolumeMounts:
    - name: tls-secret-cronus
      mountPath: "/etc/ingress-controller/ssl/cronus"
      readOnly: true
    extraVolumes:
    - name: tls-secret-cronus
      secret:
        secretName: tls-secret-cronus
