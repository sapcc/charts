kind: Deployment
apiVersion: extensions/v1beta1

metadata:
  name: ironic-api
  labels:
    system: openstack
    type: api
    component: ironic
spec:
  replicas: {{ .Values.pod.replicas.api }}
  revisionHistoryLimit: {{ .Values.pod.lifecycle.upgrades.deployments.revisionHistory }}
  strategy:
    type: {{ .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy }}
    {{ if eq .Values.pod.lifecycle.upgrades.deployments.podReplacementStrategy "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.pod.lifecycle.upgrades.deployments.rollingupdate.maxUnavailable }}
      maxSurge: {{ .Values.pod.lifecycle.upgrades.deployments.rollingupdate.maxSurge }}
    {{ end }}
  selector:
    matchLabels:
      name: ironic-api
  template:
    metadata:
      labels:
        name: ironic-api
{{ tuple . "ironic" "api" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
        configmap-etc-hash: {{ include (print $.Template.BasePath "/etc-configmap.yaml") . | sha256sum }}
    spec:
{{ tuple . "ironic" "api" | include "kubernetes_pod_anti_affinity" | indent 6 }}
      containers:
      - name: ironic-api
        image: {{.Values.global.imageRegistry}}/{{.Values.global.image_namespace}}/ubuntu-source-ironic-api:{{.Values.imageVersionIronicApi | default .Values.imageVersion | required "Please set ironic.imageVersion or similar"}}
        imagePullPolicy: IfNotPresent
        command:
          - dumb-init
          - kubernetes-entrypoint
        env:
        - name: COMMAND
          value: "ironic-api"
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: DEPENDENCY_JOBS
          value: "ironic-db-migration"
        - name: DEPENDENCY_SERVICE
          value: "ironic-postgresql,rabbitmq"
        {{- if .Values.logging.handlers.sentry }}
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: sentry
              key: {{ .Chart.Name }}.DSN.python
        {{- end }}
        - name: PGAPPNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        livenessProbe:
          httpGet:
            path: /
            port: {{.Values.global.ironicApiPortInternal}}
          initialDelaySeconds: 15
          timeoutSeconds: 5
        ports:
        - name: ironic-api{{- tuple .Values.api.override | include "utils.snippets.debug.debuggable_port" }}
          containerPort: {{.Values.global.ironicApiPortInternal}}
        volumeMounts:
        - mountPath: /etc/ironic
          name: etcironic
        - mountPath: /etc/ironic/ironic.conf
          name: ironic-etc
          subPath: ironic.conf
          readOnly: true
        - mountPath: /etc/ironic/policy.json
          name: ironic-etc
          subPath: policy.json
          readOnly: true
        - mountPath: /etc/ironic/pxe_config.template
          name: ironic-etc
          subPath: pxe_config.template
          readOnly: true
        - mountPath: /etc/ironic/rootwrap.conf
          name: ironic-etc
          subPath: rootwrap.conf
          readOnly: true
        - mountPath: /etc/ironic/logging.ini
          name: ironic-etc
          subPath: logging.ini
          readOnly: true
        {{- if .Values.watcher.enabled }}
        - name: ironic-etc
          mountPath: /etc/ironic/watcher.yaml
          subPath: watcher.yaml
          readOnly: true
        {{- end }}
      - name: statsd
        image:  "{{.Values.statsd.image.repository}}:{{.Values.statsd.image.tag}}"
        imagePullPolicy: IfNotPresent
        ports:
          - name: statsd
            containerPort: 9125
            protocol: UDP
          - name: metrics
            containerPort: {{ .Values.statsd.port }}
{{- tuple . .Values.api.override "ironic-api" | include "utils.snippets.debug.debug_port_container" | indent 6 }}
      volumes:
      - name: etcironic
        emptyDir: {}
      - name: ironic-etc
        configMap:
          name: ironic-etc
          defaultMode: 0444
{{- tuple . .Values.api.override "ironic-api" .Values.global.ironicApiPortInternal | include "utils.snippets.debug.debug_port_volumes_and_configmap" }}
