# Default values for ironic.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value
#
global:
  #image_namespace: REQUIRED
  #imageRegistry: REQUIRED
  ironicApiPortInternal: '6385'
  #ironic_tftp_ip: null
  ironictftpPortPublic: '69'
  ironic_pxe_port_public: '69'
  osprofiler: {}
  dbUser: ironic
  pgbouncer:
    enabled: true
  fernetRouter:
    image: "monsoon/fernet-router:latest"

tempest:
  enabled: false

osprofiler:
  enabled: false

statsd:
  port: 9102
  image:
    repository:  prom/statsd-exporter
    tag: v0.8.1

pod:
  replicas:
    api: 2
    inspector: 1
    pxe: 1
  resources:
    api:
      limits:
        memory: 5Gi
        cpu: 1000m
      requests:
        memory: 4.5Gi
        cpu: 700m
    inspector:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 100m
    conductor:
      limits:
        memory: 2Gi
        cpu: 1000m
      requests:
        memory: 1.5Gi
        cpu: 500m
    pxe:
      limits:
        memory: 256Mi
        cpu: 50m
      requests:
        memory: 64Mi
        cpu: 10m
    statsd:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 24Mi
        cpu: 10m
    console:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 24Mi
        cpu: 10m
    dhcp:
      limits:
        memory: 64Mi
        cpu: 50m
      requests:
        memory: 24Mi
        cpu: 10m


  lifecycle:
    upgrades:
      deployments:
        revisionHistory: 5
        podReplacementStrategy: RollingUpdate
        rollingupdate:
          maxUnavailable: 0
          maxSurge: 1

#imageVersion: null
#imageVersionIronicApi: null
#imageVersionIronicConductor: null
#imageVersionIronicInspector: null
#imageVersionIronicPxe: null
swift_multi_tenant: true

debug: "True"
dbName: ironic
#dbPassword: null

inspectordbName: ironic_inspector
inspectordbUser: ironic_inspector

api:
  override: {}

inspector:
  port_internal: '5050'
  dhcp:
    port: '67'
    proxy_port: '4011'
    ip: null
    range: null
    options:
      router: null

conductor:
  hosts: []
  deploy:
    protocol: 'http'
    port: 8088
  defaults:
    deploy:
      default_boot_option: 'local'
    conductor: {}
    dhcp: {}
    pxe:
      ipxe_enabled: true
      ipxe_use_swift: true
      pxe_bootfile_name: "undionly.kpxe"

agent:
  deploy_logs:
    collect: "on_failure"
    storage_backend: "local"
    swift_days_to_expire: 30

console:
  ssh_loglevel: error
  #secret: null

tftp_ip: null
tftp_files:
  undionly.kpxe: https://boot.ipxe.org/undionly.kpxe

portmetrics: '9102'

#network_management_uuid: DEFINE_IN_REGION_CHART
#network_cleaning_uuid: DEFINE_IN_REGION_CHART
neutron_url_timeout: 210
neutron_port_setup_delay: 0

#swift_account: null
#swift_tempurl: null

pgmetrics:
  name: ironic
  resources:
    requests:
      memory: 24Mi
      cpu: 10m
    limits:
      memory: 64Mi
      cpu: 50m
  customMetrics:
    openstack_ironic_nodes_list:
      query: "SELECT uuid, name, instance_uuid, power_state, provision_state, coalesce(last_error,'error unknown') AS last_error, count(*) as gauge from nodes group by uuid, name, instance_uuid, power_state, provision_state, last_error"
      metrics:
        - uuid:
            usage: "LABEL"
            description: "Node UUID"
        - name:
            usage: "LABEL"
            description: "Node name"
        - instance_uuid:
            usage: "LABEL"
            description: "Instance UUID provisioned on the node"
        - power_state:
            usage: "LABEL"
            description: "Power State of the node"
        - provision_state:
            usage: "LABEL"
            description: "Current Node Provision status"
        - last_error:
            usage: "LABEL"
            description: "Node last error"
        - gauge:
            usage: "GAUGE"
            description: "Current Node count"
    openstack_ironic_nodes_updated:
      query: "SELECT uuid, name, provision_state, COUNT(*) AS in_24hrs FROM nodes WHERE (updated_at >= now() - interval '24 hours') GROUP BY uuid, provision_state, name"
      metrics:
        - uuid:
            usage: "LABEL"
            description: "Node UUID"
        - name:
            usage: "LABEL"
            description: "Node name"
        - provision_state:
            usage: "LABEL"
            description: "Current Node Provision status"
        - in_24hrs_gauge:
            usage: "GAUGE"
            description: "Nodes created past 24hrs"
    openstack_ironic_nodes:
      query: "SELECT count(case when not maintenance then 1 end) as NodeNotInMaint, count(case when maintenance then 1 end) as NodeInMaint, uuid, name, coalesce(maintenance_reason,'reason unknown') AS maintenance_reason from nodes group by maintenance_reason, uuid, name"
      metrics:
        - uuid:
            usage: "LABEL"
            description: "Node UUID"
        - name:
            usage: "LABEL"
            description: "Node name"
        - maintenance_reason:
            usage: "LABEL"
            description: "Maintenance Reason of Node "
        - NodeNotInMaint:
            usage: "GAUGE"
            description: "Node not in maintenance"
        - NodeInMaint:
            usage: "GAUGE"
            description: "Nodes in maintenance"
    openstack_ironic_nodes_conductor:
      query: "select name, uuid, conductor_group, count(conductor_group) AS group from nodes where conductor_group not similar to 'bm%' GROUP BY name, uuid, conductor_group"
      metrics:
        - uuid:
            usage: "LABEL"
            description: "Node UUID"
        - name:
            usage: "LABEL"
            description: "Node name"
        - conductor_group:
            usage: "LABEL"
            description: "Conductor Group name"           
        - group:
            usage: "GAUGE"
            description: "Node count" 
             
postgresql:
  enabled: true
  imageTag: '9.4.21'
  postgresDatabase: ironic
  dbInit: ironic-db-init
  dbMaintain: ironic-db-maintain
  users:
    ironic: {}
    ironicInspector: {}
  persistence:
    enabled: true
    existingClaim: db-ironic-pvclaim
  backup:
    enabled: true
    metrics: true
    #osPassword: null
  resources:
    requests:
      cpu: "500m" # 1/2 cpu
      memory: "500Mi" # 180Mi high recorded
  shared_preload_libraries: pg_stat_statements
  track_activity_query_size: 2048

sentry:
  enabled: true

rabbitmq:
  persistence:
    enabled: false

logging:
  formatters:
    context:
      class: oslo_log.formatters.ContextFormatter
  handlers:
    stdout:
      class: StreamHandler
      args: "(sys.stdout,)"
      formatter: context
    sentry:
      class: raven.handlers.logging.SentryHandler
      level: ERROR
      args: "()"
  loggers:
    root:
      handlers: stdout, sentry
      level: WARNING
    ironic:
      handlers: stdout, sentry
      level: DEBUG
    eventlet.wsgi.server:
      handlers: stdout, sentry
      level: INFO
    auditmiddleware:
      handlers: stdout, sentry
      level: INFO

watcher:
  enabled: false

# Deploy Ironic Prometheus alerts.
alerts:
  enabled: true
  # Name of the Prometheus to which the alerts should be assigned to.
  prometheus: openstack
