# Default values for manila.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

global:
  dbUser: manila
  imageNamespace: monsoon
  imageRegistry: DEFINED-IN-REGION-CHART
  master_password: ""
  pgbouncer:
    enabled: true

api_port_internal: '8786'
debug: "True"
image_version: pike-20180518.1

logging:
  formatters:
    context:
      class: oslo_log.formatters.ContextFormatter
    default:
      format: "%(message)s"
  handlers:
    stdout:
      class: StreamHandler
      args: "(sys.stdout,)"
      formatter: context
    "null":
      class: logging.NullHandler
      formatter: default
      args: "()"
    sentry:
      class: "raven.handlers.logging.SentryHandler"
      level: ERROR
      args: "()"
  loggers:
    root:
      handlers: stdout, sentry
      level: WARNING
    manila:
      handlers: stdout, sentry
      level: DEBUG
    manila.api.openstack.wsgi:
      handlers: stdout, sentry
      level: INFO
    amqp:
      handlers: stdout, sentry
      level: WARNING
    amqplib:
      handlers: stdout, sentry
      level: WARNING
    sqlalchemy:
      handlers: stdout, sentry
      level: WARNING
    boto:
      handlers: stdout, sentry
      level: WARNING
    suds:
      handlers: stdout, sentry
      level: INFO
    eventlet.wsgi.server:
      handlers: stdout, sentry
      level: INFO
    auditmiddleware:
      handlers: stdout, sentry
      level: INFO

memcached:
  metrics:
    enabled: true

image_version_manila_nanny: '20180412140924'
nanny:
  enabled: true
  # debug mode - no script run in the containers, just a sleep loop
  debug: false
  # run the nanny every n minutes
  interval: 60
  db_purge:
    enabled: true
    # purge deleted db entries older than n days
    older_than: 7
  quota_sync:
    enabled: true
    # dry run mode, i.e. just check for quota out of sync without fixing it
    dry_run: false
  consistency:
    enabled: true
    # dry run mode, i.e. just check for consistency without fixing it
    dry_run: false
  db_cleanup:
    enabled: false
    # dry run mode, i.e. just check for objects without valid project without fixing it
    dry_run: true

pgmetrics:
  dependencyJobs: "monsoon3:manila-migration"
  customMetrics:
    openstack_manila_share_servers:
      query: "SELECT host, share_network_id, status, COUNT(*) AS count_gauge FROM share_servers GROUP BY host, share_network_id, status"
      metrics:
        - host:
            usage: "LABEL"
            description: "Project ID"
        - share_network_id:
            usage: "LABEL"
            description: "Share Network ID"
        - status:
            usage: "LABEL"
            description: "Status of the Server"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of share networks"
    openstack_manila_shares:
      query: "SELECT coalesce(share_instances.share_type_id, 'N/A') AS share_type_id, share_instances.host, shares.project_id, shares.id, share_instances.status, COUNT(*) AS count_gauge, SUM(size) size_gauge FROM shares INNER JOIN share_instances ON shares.id=share_instances.share_id GROUP BY share_instances.share_type_id, share_instances.host, share_instances.status, shares.id, shares.project_id"
      metrics:
        - share_type_id:
            usage: "LABEL"
            description: "Type of the share"
        - host:
            usage: "LABEL"
            description: "Host Name"
        - project_id:
            usage: "LABEL"
            description: "Project ID"
        - id:
            usage: "LABEL"
            description: "Share ID"
        - status:
            usage: "LABEL"
            description: "Share status"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of shares"
        - size_gauge:
            usage: "GAUGE"
            description: "Size of shares"
    openstack_manila_snapshot:
      query: "SELECT share_snapshots.project_id, share_snapshots.share_id, share_snapshots.id, share_snapshot_instances.status, COUNT(*) AS count_gauge, SUM(share_snapshots.size) size_gauge FROM share_snapshots INNER JOIN share_snapshot_instances ON share_snapshots.id=share_snapshot_instances.snapshot_id GROUP BY share_snapshots.id, share_snapshots.project_id, share_snapshots.share_id, share_snapshot_instances.status"
      metrics:
        - project_id:
            usage: "LABEL"
            description: "Project ID"
        - share_id:
            usage: "LABEL"
            description: "Share ID"
        - id:
            usage: "LABEL"
            description: "Snapshot ID"
        - status:
            usage: "LABEL"
            description: "Snapshot status"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of shares"
        - size_gauge:
            usage: "GAUGE"
            description: "Size of shares"
    openstack_manila_shares_stuck:
      query: "SELECT share_id, status, host, COUNT(*) FILTER (WHERE updated_at < now() - interval '15 minutes') AS count_gauge, MAX(EXTRACT(epoch FROM now() - updated_at)) AS max_duration_gauge from share_instances where deleted='False' and status in ('deleting','creating') GROUP BY share_id, status, host"
      metrics:
        - share_id:
            usage: "LABEL"
            description: "SHARE ID"
        - status:
            usage: "LABEL"
            description: "Share status"
        - host:
            usage: "LABEL"
            description: "Share Backend"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of shares"
        - max_duration_gauge:
            usage: "GAUGE"
            description: "Maximum duration of state"
    openstack_manila_snapshot_stuck:
      query: "SELECT share_snapshots.project_id, share_snapshots.share_id, share_snapshots.id, share_snapshot_instances.status, COUNT(*) FILTER (WHERE share_snapshot_instances.updated_at < now() - interval '15 minutes') AS count_gauge, MAX(EXTRACT(epoch FROM now() - share_snapshot_instances.updated_at)) AS max_duration_gauge FROM share_snapshots INNER JOIN share_snapshot_instances ON share_snapshots.id=share_snapshot_instances.snapshot_id WHERE share_snapshot_instances.status in ('deleting','creating') GROUP BY share_snapshots.id, share_snapshots.project_id, share_snapshots.share_id, share_snapshot_instances.status"
      metrics:
        - project_id:
            usage: "LABEL"
            description: "Snapshot Project ID"
        - share_id:
            usage: "LABEL"
            description: "Share ID"
        - id:
            usage: "LABEL"
            description: "Snapshot ID"
        - status:
            usage: "LABEL"
            description: "Snapshot status"
        - count_gauge:
            usage: "GAUGE"
            description: "Number of shares"
        - max_duration_gauge:
            usage: "GAUGE"
            description: "Maximum duration of state"

pod:
  replicas:
    api: 2
  lifecycle:
    upgrades:
      deployments:
        revision_history: 5
        pod_replacement_strategy: RollingUpdate
        rolling_update:
           max_unavailable: 0
           max_surge: 1

postgresql:
  imageTag: '9.4.14'
  postgresDatabase: manila
  dbInit: manila-db-init
  dbMaintain: manila-db-maintain
  pgbouncer:
    enabled: true
  persistence:
    enabled: true
    existingClaim: db-manila-pvclaim
  backup:
    enabled: true
    metrics: true
    imageTag: v0.5.12
    os_password: null

rabbitmq:
  persistence:
    enabled: false

sentry:
  enabled: true

# Dictionary mapping availability-zones to shares
# shares:
#   nova1:
#     shares_netapp:
#      - name: DEFINED-IN-REGION-CHART
#        backend_name: custom-name-used-in-type
#        share_server_cleanup_interval: 10
#        host: my-netapp-host
#        username: my-netapp-user
#        password: my-netapp-pw
#        root_volume_aggregate: DEFINED-IN-REGION-CHART
#        aggregate_search_pattern: DEFINED-IN-REGION-CHART
#        port_search_pattern: DEFINED-IN-REGION-CHART
#        physical_network: DEFINED-IN-REGION-CHART
#        mtu: DEFINED-IN-REGION-CHART
#        reserved_share_percentage: 0

vice_president: true

audit:
  enabled: false
  # do by default not attach the request payloads of create/update calls to the event
  record_payloads: false
  metrics_enabled: true
  # how many messages to buffer before dumping to log (when rabbit is down or too slow)
  mem_queue_size: 1000

rabbitmq_notifications:
  name: manila
