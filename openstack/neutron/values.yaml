# Default values for neutron.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value
network_agents: []
osprofiler: {}

global:
  dbUser: neutron
  # dbPassword:
  # imageRegistry:
  metadata_workers: 1

pod:
  replicas:
    server: 2
  lifecycle:
    upgrades:
      deployments:
        revision_history: 5
        pod_replacement_strategy: RollingUpdate
        rolling_update:
           max_unavailable: 0
           max_surge: 1
  debug:
    server: false
    dhcp_agent: false
    metadata_agent: false
    aci_agent: false
    asr_agent: false
    f5_agent: false
    cisco_ml2_ucsm_bm: false
  resources:
    enabled: false

debug: "True"
port_metrics: '9102'
l2_port_metrics: '9102'
l3_port_metrics: '9103'

imageName: 'monsoon/loci-neutron'
# imageVersion:
# imageVersionServerRPC:
# imageVersionServerAPI:
# imageVersionF5:
# imageVersionACI:
# imageVersionASR1kML2:
# imageVersionASR1k:
# imageVersionUCSM:
# imageVersionNSXv3:
# imageVersionNanny:
# imageVersionEntanglement:
# imageVersionNetworkAgent:
# imageVersionNetworkAgentDHCP:
# imageVersionNetworkAgentMetadata:
# imageVersionNetworkAgentL3:
# imageVersionNetworkAgentOVS:
# imageVersionIronicAgent:

service_plugins: neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,networking_cisco.plugins.cisco.service_plugins.cisco_device_manager_plugin.CiscoDeviceManagerPlugin,networking_cisco.plugins.cisco.service_plugins.cisco_router_plugin.CiscoRouterPlugin
default_router_type: ASR1k_router
router_scheduler_driver: neutron.scheduler.l3_agent_scheduler.LeastRoutersScheduler

aci:
  apic_application_profile: converged_cloud_openstack
  support_remote_mac_clear: 'True'
  sync_allocations: 'True'
  # apic_hosts: null
  # apic_user: null
  # apic_password: null
  # apic_tenant_name: null

arista:
  api_type: nocvx
  sync_interval: 60
  conn_timeout: 30
  lossy_consolidation_limit: 50
  # eapi_host:
  # eapi_username:
  # eapi_password:
  # switches:
  #  - host:
  #    user:
  #    password:

bgp_vpn:
  enabled: false

asr:

  config_agents: []

f5:
  snat_per_subnet: 1
  # loadbalancers:
  #  - name: null
  #    username:
  #    password:
  #    guest_host:
  #    vcmp_host:
  #    external_physical_mappings:
  #    physical_network:

hypervisors_vmware: []

# manila:
#   physnet:

# SFTP-swift bridge (e.g. for nsx-t backups in control-plane)
sftp:
  image: '20190620144945'
  enabled: false
  externalIPs: []
  user: db_backup
  # hash: # generated by ./swift-sftp gen-password-hash db_backup
  # -> Values.global.dbBackupServicePassword

drivers:
  nsxv3:
    defaults:
      AGENT:
        sync_pool_size: 10
        polling_interval: 20
        quitting_rpc_timeout: 60
        sync_requests_per_second: 10
        db_max_records_per_query: 1000
      NSXV3:
        nsxv3_connection_retry_count: 10
        nsxv3_connection_retry_sleep: 5
        nsxv3_login_port: 443
        nsxv3_suppress_ssl_wornings: True
        nsxv3_max_records_per_query: 2000
        nsxv3_requests_per_second: 90
# cisco_ucsm_bm:
#  example.com:
#    user:
#    password:
#    physical_network:
#    vnic_paths:

logging:
    formatters:
        context:
            class: oslo_log.formatters.ContextFormatter
        default:
            format: "%(message)s"
    handlers:
        stdout:
            class: StreamHandler
            args: "(sys.stdout,)"
            formatter: context
        "null":
            class: logging.NullHandler
            formatter: default
            args: "()"
        sentry:
            class: "raven.handlers.logging.SentryHandler"
            level: ERROR
            args: "()"
    loggers:
        root:
            handlers: stdout, sentry
            level: WARNING
        neutron:
            handlers: stdout, sentry
            level: WARNING
        neutron_lbaas:
            handlers: stdout, sentry
            level: WARNING
        neutron.pecan_wsgi.hooks.policy_enforcement:
            handlers: stdout, sentry
            level: INFO
        suds:
            handlers: "null"
            level: ERROR
        eventlet.wsgi.server:
            handlers: stdout, sentry
            level: INFO
        auditmiddleware:
            handlers: stdout, sentry
            level: INFO

pgmetrics:
  name: neutron
  db_name: neutron
  customMetrics:
    openstack_neutron_networks_count:
      query: "SELECT COUNT(*) AS gauge, status FROM networks GROUP BY networks.status"
      metrics:
        - status:
            usage: "LABEL"
            description: "Network Status"
        - gauge:
            usage: "GAUGE"
            description: "Networks Count"
    openstack_neutron_routers_count:
      query: "SELECT COUNT(*) AS gauge, status FROM routers GROUP BY routers.status"
      metrics:
        - status:
            usage: "LABEL"
            description: "Router Status"
        - gauge:
            usage: "GAUGE"
            description: "Router Count"
    openstack_neutron_loadbalancer_count:
      query: "SELECT COUNT(*) AS gauge, operating_status FROM lbaas_loadbalancers GROUP BY lbaas_loadbalancers.operating_status"
      metrics:
        - operating_status:
            usage: "LABEL"
            description: "lbaas Status"
        - gauge:
            usage: "GAUGE"
            description: "lbaas Count"
    openstack_neutron_SAP_IP_status:
      query: "SELECT floatingips.floating_network_id, networks.name AS network_name, floatingips.status, COUNT(*) AS gauge FROM floatingips INNER JOIN networks ON floatingips.project_id=networks.project_id WHERE floating_ip_address LIKE '10%' GROUP BY floatingips.floating_network_id, floatingips.status, networks.name"
      metrics:
        - floating_network_id:
            usage: "LABEL"
            description: "Floating Network ID"
        - network_name:
            usage: "LABEL"
            description: "Network Name"
        - status:
            usage: "LABEL"
            description: "Floating IP Status per Network"
        - gauge:
            usage: "GAUGE"
            description: "Count of Floating IP by status"
    openstack_neutron_ext_IP_status:
      query: "SELECT floatingips.floating_network_id, networks.name AS network_name, floatingips.status, COUNT(*) AS gauge FROM floatingips INNER JOIN networks ON floatingips.project_id=networks.project_id WHERE floating_ip_address LIKE '15%' GROUP BY floatingips.floating_network_id, floatingips.status, networks.name"
      metrics:
        - floating_network_id:
            usage: "LABEL"
            description: "Floating Network ID"
        - network_name:
            usage: "LABEL"
            description: "Network Name"
        - status:
            usage: "LABEL"
            description: "Floating IP Status per Network"
        - gauge:
            usage: "GAUGE"
            description: "Count of Floating IP by status"
    openstack_neutron_SAP_IPused_per_subnet:
      query: "SELECT subnet_id, COUNT(*) AS gauge, network_id FROM ipallocations WHERE ip_address LIKE '10%' GROUP BY ipallocations.subnet_id, ipallocations.network_id"
      metrics:
        - subnet_id:
            usage: "LABEL"
            description: "SUBNET_ID details"
        - network_id:
            usage: "LABEL"
            description: "network_id details"
        - gauge:
            usage: "GAUGE"
            description: "SAP IPs used per subnet"
    openstack_neutron_ext_IPused_per_subnet:
      query: "SELECT subnet_id, COUNT(*) AS gauge, network_id FROM ipallocations WHERE ip_address LIKE '15%' GROUP BY ipallocations.subnet_id, ipallocations.network_id"
      metrics:
        - subnet_id:
            usage: "LABEL"
            description: "SUBNET_ID details"
        - network_id:
            usage: "LABEL"
            description: "network_id details"
        - gauge:
            usage: "GAUGE"
            description: "Internet IPs used per subnet"
    openstack_neutron_monitor_sec_grp:
     query: "select securitygroupportbindings.security_group_id AS security_group_id, count(*) as count from securitygroupportbindings join securitygrouprules on securitygroupportbindings.security_group_id = securitygrouprules.security_group_id group by securitygroupportbindings.security_group_id order by count desc limit 10"
     metrics:
        - security_group_id:
            usage: "LABEL"
            description: "security group id details"
        - count:
            usage: "GAUGE"
            description: "Estimate on number of filter rules"
    openstack_neutron_monitor_agents:
      query: "SELECT host, agent_type, load, EXTRACT(EPOCH FROM (now() - heartbeat_timestamp)) as heartbeat_seconds FROM agents WHERE admin_state_up and EXTRACT(EPOCH FROM (now() - heartbeat_timestamp)) < 90"
      metrics:
        - host:
            usage: "LABEL"
            description: "Name of the agents host"
        - agent_type:
            usage: "LABEL"
            description: "Type of the agent"
        - heartbeat_seconds:
            usage: "GAUGE"
            description: "Seconds since the last heartbeat"
        - load:
            usage: "GAUGE"
            description: "Load of the agent"

postgresql:
  custom_repository: true
  imageTag: "9.4.21"
  
  postgresDatabase: neutron
  # postgresPassword:
  dbInit: neutron-db-init
  dbMaintain: neutron-db-maintain
  persistence:
    enabled: false
  backup:
    enabled: false
    image_version: v0.5.15

  resources:
    requests:
      cpu: "3000m" # 3 cpu
      memory: "2Gi" # 1.5Gi high recorded

  max_connections: 500
  shared_buffers: '4GB'
  temp_buffers: '32MB'
  work_mem: '64MB'
  maintenance_work_mem: '256MB'
  max_stack_depth: '4MB'
  effective_cache_size: '16GB'
  autovacuum_analyze_scale_factor: '0.02'
  autovacuum_vacuum_scale_factor: '0.01'
  random_page_cost: '1.1'
  
  pgbouncer:
    enabled: true
    config:
      max_db_connections: 83
      default_pool_size: 50
      reserve_pool_size: 100
      idle_transaction_timeout: 60

sentry:
  enabled: true

audit:
  enabled: false 
  # do by default not attach the request payloads of create/update calls to the event
  record_payloads: false
  metrics_enabled: true
  # how many messages to buffer before dumping to log (when rabbit is down or too slow)
  mem_queue_size: 1000

rabbitmq:
  persistence:
    enabled: false

  resources:
    enabled: true

    requests:
      memory: 2Gi
      cpu: 1000m
    limits:
      cpu: 2000m

rabbitmq_notifications:
  name: neutron

# secgroup_entanglement_exporter:
#  release: null # Neutron release in lower case, e.g. "queens"

# openstack-watcher-middleware
watcher:
  enabled: true

# neutron nanny
nanny:
  enabled: False
  # run the pod with an infinite sleep loop for debugging
  debug: False
  cleanup_pending_lb:
    enabled: False
    # dry run mode, i.e. just pretend to cleanup the entries
    dry_run: True
    # run the db cleanup every n minutes
    interval: 60
    # really delete entities after how many iterations
    iterations: 3

unittest:
  enabled: false

# Deploy Neutron Prometheus alerts.
alerts:
  enabled: true
  # Name of the Prometheus to which the alerts should be assigned to.
  prometheus: openstack
