# Default values for nova.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value
global:
  novaApiPortAdmin: '8774'
  novaApiPortInternal: '8774'
  novaApiPortPublic: '443'
  novaMetadataPortInternal: '8775'
  novaConsolePortPublic: '443'
  novaNovncPortInternal: '6080'
  novaSpicehtml5PortInternal: '6082'
  novaSerialPortInternal: '6083'
  novaShellinaboxPortInternal: '6084'
  master_password: null

  hypervisors: []
  hypervisors_kvm: []
  hypervisors_ironic: []
  osprofiler: {}
  pgbouncer:
    enabled: true

osprofiler: {}

pod:
  replicas:
    api: 2
    console: 1
    conductor: 1
    scheduler: 1
  lifecycle:
    upgrades:
      deployments:
        revision_history: 5
        podReplacementStrategy: RollingUpdate
        rollingUpdate:
           maxUnavailable: 0
           maxSurge: 1
  debug:
    api: false

debug: "True"

dbName: nova
dbUser: nova
dbPassword: null

apidbName: nova_api
apidbUser: nova_api
apidbPassword: null

portMetrics: '9102'

sentry_dsn: DEFINE_IN_REGION_CHART

#TODO we need to move to global or find another way to share image versions
imageVersionNeutronServerM3: null
imageVersionNeutronOpenvswitchAgent: null
imageVersionNeutronVswitchd: null
imageVersionNeutronVswitchdb: null

imageVersion: null
imageVersionNovaApi: null
imageVersionNovaCompute: null
imageVersionNovaLibvirt: null
imageVersionNovaConductor: null
imageVersionNovaConsoleauth: null
imageVersionNovaNovncproxy: null
imageVersionNovaShellinaboxproxy: null
imageVersionNovaSpicehtml5proxy: null
imageVersionNovaScheduler: null

cross_az_attach: 'False'

scheduler:
  driver: "filter_scheduler"
  scheduler_tracks_instance_changes: False
  scheduler_instance_sync_interval: 120
  default_filters: "AvailabilityZoneFilter, RamFilter, DiskFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, ServerGroupAntiAffinityFilter, ServerGroupAffinityFilter, BaremetalExactRamFilter, BaremetalExactCoreFilter, BaremetalExactDiskFilter"
  ram_weight_multiplier: 1.0
  disk_weight_multiplier: 1.0

compute:
  defaults:
    default:
      max_concurrent_builds_per_project: 3
    vmware:
      insecure: True
      use_linked_clone: False
      pbm_enabled: False
      pbm_default_policy: "nova-ephemeral"

pgmetrics:
  name: nova
  customMetrics:
#    openstack_compute_nodes:
#      query: "SELECT compute_nodes.host, aggregate_metadata.value AS availability_zone, compute_nodes.hypervisor_type, compute_nodes.free_disk_gb AS free_disk_gb_gauge, compute_nodes.local_gb AS local_gb_gauge, compute_nodes.local_gb_used AS local_gb_used_gauge, compute_nodes.free_ram_mb AS free_ram_mb_gauge, compute_nodes.memory_mb AS memory_mb_gauge, compute_nodes.memory_mb_used AS memory_mb_used_gauge, compute_nodes.vcpus_used AS vcpus_used_gauge, compute_nodes.vcpus AS vcpus_gauge, compute_nodes.running_vms AS running_vms_gauge from compute_nodes join aggregate_hosts on compute_nodes.host=aggregate_hosts.host join aggregate_metadata on aggregate_hosts.aggregate_id=aggregate_metadata.aggregate_id WHERE compute_nodes.deleted = 0"
#        - availability_zone:
#            usage: "LABEL"
#            description: "Availability Zone details from aggregate_metadata table"
#        - host:
#            usage: "LABEL"
#            description: "Name of the host"
#        - hypervisor_type:
#            usage: "LABEL"
#            description: "Type of the hypervisor"
#        - free_disk_gb_gauge:
#            usage: "GAUGE"
#        - local_gb_gauge:
#            usage: "GAUGE"
#            description: "Total local disk size in GB"
#        - local_gb_used_gauge:
#            usage: "GAUGE"
#            description: "Total used local disk size in GB"
#        - free_ram_mb_gauge:
#            usage: "GAUGE"
#            description: "Free RAM in MiB"
#        - memory_mb_gauge:
#            usage: "GAUGE"
#        - memory_mb_used_gauge:
#            usage: "GAUGE"
#            description: "Total Used RAM in MiB"
#        - vcpus_used_gauge:
#            usage: "GAUGE"
#            description: "vCPUs used"
#        - vcpus_gauge:
#            usage: "GAUGE"
#            description: "Total vCPUs"
#        - running_vms_gauge:
#            usage: "GAUGE"
#            description: "Number of VMs running"
#     openstack_compute_instances:
#       query: "SELECT coalesce(instances.host,'N/A') AS host, instances.project_id, COUNT(*) AS gauge, instances.vm_state, coalesce(instance_types.name,'N/A') AS flavor_name FROM instances JOIN instance_types ON instances.instance_type_id=instance_types.id GROUP BY instances.vm_state, instances.host, instances.project_id, instance_types.name"
#       metrics:
#         - project_id:
#             usage: "LABEL"
#             description: "Project ID"
#         - vm_state:
#             usage: "LABEL"
#             description: "State of the VM"
#         - host:
#             usage: "LABEL"
#             description: "Host Name"
#         - flavor_name:
#             usage: "LABEL"
#             description: "Flavor Name of Instance"
#         - gauge:
#             usage: "GAUGE"
#             description: "VM Count"
#     openstack_compute_stuck_instances:
#       query: "SELECT coalesce(host, 'N/A') AS host, project_id, uuid, availability_zone, vm_state, COUNT(*) FILTER (WHERE updated_at < now() - interval '15 minutes') AS count_gauge, MAX(EXTRACT(epoch FROM now() - updated_at)) AS max_duration_gauge FROM instances WHERE vm_state IN ('scheduling','pausing','unpausing','suspending','resuming','rescuing','unrescuing','rebuilding','migrating','deleting','restoring','shelving','unshelving','building','deleting','stopping','starting','spawning','rebooting') AND deleted=0 GROUP BY host, project_id, uuid, availability_zone, vm_state"
#       metrics:
#         - project_id:
#             usage: "LABEL"
#             description: "Project ID"
#         - vm_state:
#             usage: "LABEL"
#             description: "State of the VM"
#         - host:
#             usage: "LABEL"
#             description: "Host Name"
#         - uuid:
#             usage: "LABEL"
#             description: "Instance ID"
#         - availability_zone:
#             usage: "LABEL"
#             description: "AZ Name"
#         - count_gauge:
#             usage: "GAUGE"
#             description: "VM Count"
#         - max_duration_gauge:
#             usage: "GAUGE"
#             description: "Maximum duration of state"
     openstack_compute_instance_launch:
       query: "SELECT coalesce(host, 'N/A') AS host, project_id, uuid, vm_state, MAX(EXTRACT(epoch FROM launched_at - created_at)) AS time_taken_gauge FROM instances WHERE (launched_at IS NOT NULL AND launched_at >= now() - interval '24 hours') AND NOT deleted_at < now() - interval '24 hours' AND host!='nova-compute-ironic' GROUP BY host, project_id, uuid, vm_state"
       metrics:
         - host:
             usage: "LABEL"
             description: "Name of host"
         - project_id:
             usage: "LABEL"
             description: "Project ID of the instance"
         - uuid:
             usage: "LABEL"
             description: "Instance UUID"
         - vm_state:
             usage: "LABEL"
             description: "instance current state"
         - time_taken_gauge:
             usage: "GAUGE"
             description: "Name of host"
#     openstack_compute_instance_termination:
#       query: "SELECT coalesce(host, 'N/A') AS host, project_id, uuid, vm_state, MAX(EXTRACT(epoch FROM updated_at - terminated_at)) AS time_taken_gauge FROM instances WHERE (terminated_at IS NOT NULL AND terminated_at >= now() - interval '24 hours') AND NOT deleted_at < now() - interval '24 hours' AND host!='nova-compute-ironic' GROUP BY host, project_id, uuid, vm_state"
#       metrics:
#         - host:
#             usage: "LABEL"
#             description: "Name of host"
#         - project_id:
#             usage: "LABEL"
#             description: "Project ID of the instance"
#         - uuid:
#             usage: "LABEL"
#             description: "Instance UUID"
#         - vm_state:
#             usage: "LABEL"
#             description: "instance current state"
#         - time_taken_gauge:
#             usage: "GAUGE"
#             description: "Name of host"
#     openstack_compute_instance_created:
#       query: "SELECT coalesce(host, 'N/A') AS host, vm_state, COUNT(*) FILTER (where created_at >= now() - interval '24 hours') AS in_24hrs_gauge FROM instances WHERE NOT deleted_at < now() - interval '24 hours' AND host!='nova-compute-ironic' GROUP BY host, vm_state"
#       metrics:
#         - host:
#             usage: "LABEL"
#             description: "Name of host"
#         - vm_state:
#             usage: "LABEL"
#             description: "instance current state"
#         - in_24hrs_gauge:
#             usage: "GAUGE"
#             description: "Name of host"
#     openstack_ironic_node_launch:
#       query: "SELECT coalesce(host, 'N/A') AS host, project_id, uuid, vm_state, MAX(EXTRACT(epoch FROM launched_at - created_at)) AS time_taken_gauge FROM instances WHERE (launched_at IS NOT NULL AND launched_at >= now() - interval '24 hours') AND NOT deleted_at < now() - interval '24 hours' AND host='nova-compute-ironic' GROUP BY host, project_id, uuid, vm_state"
#       metrics:
#         - host:
#             usage: "LABEL"
#             description: "Name of host"
#         - project_id:
#             usage: "LABEL"
#             description: "Project ID of the instance"
#         - uuid:
#             usage: "LABEL"
#             description: "Instance UUID"
#         - vm_state:
#             usage: "LABEL"
#             description: "instance current state"
#         - time_taken_gauge:
#             usage: "GAUGE"
#             description: "Name of host"
#     openstack_ironic_node_termination:
#       query: "SELECT coalesce(host, 'N/A') AS host, project_id, uuid, vm_state, MAX(EXTRACT(epoch FROM updated_at - terminated_at)) AS time_taken_gauge FROM instances WHERE (terminated_at IS NOT NULL AND terminated_at >= now() - interval '24 hours') AND NOT deleted_at < now() - interval '24 hours' AND host='nova-compute-ironic' GROUP BY host, project_id, uuid, vm_state"
#       metrics:
#         - host:
#             usage: "LABEL"
#             description: "Name of host"
#         - project_id:
#             usage: "LABEL"
#             description: "Project ID of the instance"
#         - uuid:
#             usage: "LABEL"
#             description: "Instance UUID"
#         - vm_state:
#             usage: "LABEL"
#             description: "instance current state"
#         - time_taken_gauge:
#             usage: "GAUGE"
#             description: "Name of host"
#     openstack_ironic_node_created:
#       query: "SELECT coalesce(host, 'N/A') AS host, vm_state, COUNT(*) FILTER (where created_at < now() - interval '24 hours') AS in_24hrs_gauge FROM instances WHERE host='nova-compute-ironic' AND NOT deleted_at < now() - interval '24 hours' GROUP BY host, vm_state"
#       metrics:
#         - host:
#             usage: "LABEL"
#             description: "Name of host"
#         - vm_state:
#             usage: "LABEL"
#             description: "instance current state"
#         - in_24hrs_gauge:
#             usage: "GAUGE"
#             description: "Name of host"

postgresql:
  imageTag: '9.4.14'
  postgresDatabase: nova
  dbInit: nova-db-init
  dbMaintain: nova-db-maintain
  name: nova
  users:
    nova: {}
    nova_api: {}
  pgbouncer:
    enabled: true
  persistence:
    enabled: true
    existingClaim: db-nova-pvclaim
  backup:
    enabled: true
    metrics: true
    os_password: null
  shared_preload_libraries: pg_stat_statements
  track_activity_query_size: 2048

audit:
  enabled: false
  # how many messages to buffer before dumping to log (when rabbit is down or too slow)
  mem_queue_size: 1000
  record_payloads: false
  metrics_enabled: true

rabbitmq:
  users:
    default:
      password: null
    admin:
      password: null
  persistence:
    enabled: false
  metrics:
    password: null

rabbitmq_notifications:
  name: nova
  persistence:
    enabled: false

logging:
    formatters:
        context:
            class: oslo_log.formatters.ContextFormatter
        default:
            format: "%(message)s"
    handlers:
        stdout:
            class: StreamHandler
            args: "(sys.stdout,)"
            formatter: context
        "null":
            class: logging.NullHandler
            args: "()"
            formatter: default
        sentry:
            class: raven.handlers.logging.SentryHandler
            level: ERROR
            args: "()"
    loggers:
        root:
            handlers: stdout, sentry
            level: WARNING
        nova:
            handlers: stdout, sentry
            level: INFO
        nova.scheduler.host_manager: # You might get problems with unicodedecode errors if you decrease that
            handlers: stdout, sentry
            level: INFO
        eventlet.wsgi.server:
            handlers: stdout, sentry
            level: INFO
        suds:
            handlers: "null"
            level: ERROR
        oslo_vmware.common.loopingcall:
            handlers: "null"
            level: ERROR

# nova nanny
imageVersion_nova_nanny: DEFINED-IN-REGION-CHART
nanny:
  enabled: False
  # run the pod with an infinite sleep loop for debugging
  debug: False
  # run the nanny every n minutes
  interval: 15
quota_sync:
  enabled: False
db_purge:
  enabled: False
  # dry run mode, i.e. just pretend to purge the entries
  dry_run: True
  # purge instance entries older than n days
  older_than: 7
  # purge at max n entries in one run
  max_number: 50
consistency:
  enabled: False
  # dry run mode, i.e. just check for consistency without fixing it
  dry_run: True
  # purge deleted block_device_mappings and reservations older than n days
  older_than: 7
  # keep at max n instance fault entries per instance
  max_instance_faults: 10
db_cleanup:
  enabled: False
  # dry run mode, i.e. just pretend to cleanup the entries
  dry_run: True
  # run the db cleanup every n minutes
  interval: 720
  # really delete entities after how many iterations
  iterations: 14
sync_neutron_cache:
  enabled: False
  # dry run mode, i.e. just pretend to cleanup the entries
  dry_run: True
  # run the db cleanup every n minutes
  interval: 360

# openstack-watcher-middleware
watcher:
  enabled: true
