# Default values for octavia.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

api_port_internal: 9876
api_backdoor: false

global:
  imageNamespace: monsoon
  dbUser: octavia
  rpc_response_timeout: 60

db_name: octavia

mariadb:
  enabled: true
  name: octavia
  initdb_configmap: octavia-initdb
  persistence_claim:
    name: db-octavia-pvclaim

ingress:
  annotations:
    vice-president: "true"
    disco: "true"

mysql_metrics:
  db_name: octavia
  db_user: octavia
  customMetrics:
    - help: Total Load Balancer count
      labels:
      - "status"
      - "octavia_host"
      name: octavia_loadbalancers_count_gauge
      query: |
        SELECT
          COUNT(*) AS count_gauge,
          provisioning_status AS status,
          server_group_id as octavia_host
        FROM load_balancer
        GROUP BY load_balancer.provisioning_status;
      values:
      - "count_gauge"
    - help: Worker agent seconds since the last heartbeat
      labels:
      - "octavia_host"
      name: octavia_monitor_agents_heartbeat_seconds
      query: |
        SELECT
          compute_flavor AS octavia_host,
          (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(MAX(updated_at))) AS heartbeat_seconds
        FROM amphora
        WHERE status = 'READY'
        GROUP BY compute_flavor;
      values:
      - "heartbeat_seconds"

pod:
  resources:
    api: null
    housekeeping: null
    worker: null
    driver_agent: null
    status_manager: null

providers: "noop_driver: 'The No-Op driver.', f5: 'F5 BigIP driver.'"
default_provider: "f5"
default_profiles:
  profile_http: cc_http_profile
  profile_http_compression: cc_httpcompression_profile
  profile_l4: cc_fastL4_profile
  profile_tcp: cc_tcp_profile
  profile_udp: cc_udp_profile
  profile_multiplex: cc_oneconnect_profile

# Deploy Octavia Prometheus alerts.
alerts:
  enabled: true
  # Name of the Prometheus to which the alerts should be assigned to.
  prometheus: openstack

sentry:
  enabled: true

logging:
  formatters:
    context:
      class: oslo_log.formatters.ContextFormatter
    default:
      format: "%(message)s"
  handlers:
    stdout:
      class: StreamHandler
      args: "(sys.stdout,)"
      formatter: context
    "null":
      class: logging.NullHandler
      formatter: default
      args: "()"
    sentry:
      class: "raven.handlers.logging.SentryHandler"
      level: ERROR
      transport: ThreadedRequestsHTTPTransport
      args: "()"
  loggers:
    root:
      handlers: stdout, sentry
      level: WARNING
    octavia:
      handlers: stdout, sentry
      level: DEBUG
    octavia.common.keystone:
      handlers: stdout, sentry
      level: WARNING
    octavia_f5:
      handlers: stdout, sentry
      level: DEBUG
    barbicanclient:
      handlers: "null"
      level: ERROR
    auditmiddleware:
      handlers: stdout, sentry
      level: INFO
