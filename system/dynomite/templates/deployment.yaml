{{- range $index, $member := .Values.dynomite.member }}
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: {{ printf "%s-%d" "dynomite" $index }}
  labels:
    release: "{{ $.Release.Name }}"
spec:
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ printf "%s-%d" "dynomite" $index }}
      annotations:
        checksum/dynomite-config: {{ tuple $ $member $index | include "dynomite/templates/etc/_dynomite.yaml.tpl" | sha256sum }}
        checksum/redis-config: {{ tuple $ $member $index | include "dynomite/templates/etc/_redis.conf.tpl" | sha256sum }}
        checksum/bin-config: {{ include "dynomite/templates/configmap-bin.yaml" $ | sha256sum }}
    spec:
      volumes:
        - name: secret
          secret:
            secretName: dynomite-secret
        - name: dynomite
          configMap:
            name: {{ printf "%s-%d" "dynomite" $index }}
        - name: redis
          configMap:
            name: {{ printf "%s-%d" "redis" $index }}
        - name: bin
          configMap:
            name: bin
            defaultMode: 0755
        - name: redis-storage
          emptyDir: {}
      initContainers:
        - name: restore
          imagePullPolicy: {{ $.Values.backup.image.pullPolicy }}
          image: {{ template "backup.image" $ }}
          env:
            - name: OS_AUTH_URL
              value: {{ required ".Values.backup.auth.os_auth_url" $.Values.backup.auth.os_auth_url }}
            - name: OS_AUTH_VERSION
              value: "3"
            - name: OS_USERNAME
              value: {{ required ".Values.backup.auth.os_username" $.Values.backup.auth.os_username }}
            - name: OS_USER_DOMAIN_NAME
              value: {{ required ".Values.backup.auth.os_user_domain" $.Values.backup.auth.os_user_domain }}
            - name: OS_PROJECT_NAME
              value: {{ required ".Values.backup.auth.os_project_name" $.Values.backup.auth.os_project_name }}
            - name: OS_PROJECT_DOMAIN_NAME
              value: {{ required ".Values.backup.auth.os_project_domain" $.Values.backup.auth.os_project_domain }}
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dynomite-secret
                  key: db_backup_password
          args:
            - backend
            # Replace `listbackups` with `restore` to trigger a manual restore
            - listbackups
            # [datacenter]/dynomite/[rack]/[ip]-[token]
            - {{ $member | include "dynomite.dc" }}/dynomite/{{ $member | include "dynomite.rack" }}/{{ $member | include "dynomite.ip" }}-{{ $member | include "dynomite.token" }}
          volumeMounts:
            - name: redis-storage
              mountPath: /data
      containers:
        - name: dynomite
          imagePullPolicy: {{ $.Values.dynomite.image.pullPolicy }}
          image: {{ template "dynomite.image" $ }}
          env:
            - name: DYNO_INSTANCE
              value: {{ $member | include "dynomite.ip" }}
            {{- if $.Values.dynomite.warmup }}
            - name: WARMUP_PEER
              value: {{ tuple $member $.Values.dynomite.foreign_member | include "dynomite.token_peers" }}
            - name: WARMUP_ALLOWED_DIFF
              value: "10"
            {{- end }}
            {{- if $.Values.dynomite.dns_txt }}
            - name: DYNOMITE_DNS_TXT_NAME
              value: {{ $.Values.dynomite.dns_txt }}
            {{- end }}
            - name: REQUIREPASS
              valueFrom:
                secretKeyRef:
                  name: dynomite-secret
                  key: redis_password
          command:
            - /usr/bin/dumb-init
          args:
            - /dynomite-bin/dynomite_startup.sh
          volumeMounts:
            - name: dynomite
              mountPath: '/config/'
            - name: bin
              mountPath: '/dynomite-bin/'
          ports:
            # Client Port
            - name: listen
              containerPort: 8102
            # Peer Port
            - name: dyn-listen
              containerPort: 8101
            # Admin/Stats Port
            - name: admin
              containerPort: 22222
          livenessProbe:
            httpGet:
              path: /ping
              port: 22222
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "/dynomite-bin/dynomite_readiness.sh"
            initialDelaySeconds: 5
            timeoutSeconds: 1
        - name: redis
          imagePullPolicy: {{ $.Values.redis.image.pullPolicy }}
          image: {{ template "redis.image" $ }}
          env:
            - name: REQUIREPASS
              valueFrom:
                secretKeyRef:
                  name: dynomite-secret
                  key: redis_password
          args:
            - /config/redis.conf
            {{- if $.Values.redis.password }}
            - --requirepass $(REQUIREPASS)
            - --masterauth $(REQUIREPASS)
            {{- end }}
          volumeMounts:
            - name: redis
              mountPath: '/config/'
            - name: redis-storage
              mountPath: /data
          ports:
          - name: redis
            containerPort: 22122
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "redis-cli -p 22122 ping"
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "redis-cli -p 22122 ping"
            initialDelaySeconds: 5
            timeoutSeconds: 1
        - name: backup
          imagePullPolicy: {{ $.Values.backup.image.pullPolicy }}
          image: {{ template "backup.image" $ }}
          env:
            - name: OS_AUTH_URL
              value: {{ required ".Values.backup.auth.os_auth_url" $.Values.backup.auth.os_auth_url }}
            - name: OS_AUTH_VERSION
              value: "3"
            - name: OS_USERNAME
              value: {{ required ".Values.backup.auth.os_username" $.Values.backup.auth.os_username }}
            - name: OS_USER_DOMAIN_NAME
              value: {{ required ".Values.backup.auth.os_user_domain" $.Values.backup.auth.os_user_domain }}
            - name: OS_PROJECT_NAME
              value: {{ required ".Values.backup.auth.os_project_name" $.Values.backup.auth.os_project_name }}
            - name: OS_PROJECT_DOMAIN_NAME
              value: {{ required ".Values.backup.auth.os_project_domain" $.Values.backup.auth.os_project_domain }}
            - name: OS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dynomite-secret
                  key: db_backup_password
            - name: REQUIREPASS
              valueFrom:
                secretKeyRef:
                  name: dynomite-secret
                  key: redis_password
          args:
            - backend
            {{- if $.Values.redis.password }}
            - --backend-password=$(REQUIREPASS)
            {{- end }}
            - backup
            - --every=60m
            # [datacenter]/dynomite/[rack]/[ip]-[token]
            - {{ $member | include "dynomite.dc" }}/dynomite/{{ $member | include "dynomite.rack" }}/{{ $member | include "dynomite.ip" }}-{{ $member | include "dynomite.token" }}
          volumeMounts:
            - name: redis-storage
              mountPath: /data
---
{{- end }}
