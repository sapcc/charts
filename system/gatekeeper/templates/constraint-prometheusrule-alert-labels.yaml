apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: gkprometheusrulealertlabels
spec:
  crd:
    spec:
      names:
        kind: GkPrometheusruleAlertLabels
      validation:
        openAPIV3Schema:
          properties: {}

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package prometheusrulealertlabels

        alert_rule[{"rule": rule, "group_name": group.name}] {
          # match on all rules that are alerts
          input.review.object.kind == "PrometheusRule"
          group := input.review.object.spec.groups[_]
          regex.match(".*\\.alerts$", group.name)
          rule := group.rules[_]
        }

        violation[{"msg": msg}] {
          alert := alert_rule[_]
          # warn if we don't have a valid labels.severity
          not regex.match("^(?:critical|warning|info)$", object.get(alert.rule.labels, "severity", ""))
          msg := sprintf("rule %s in group %s does not have a valid value for labels.severity (\"critical\", \"warning\" or \"info\")", [alert.rule.alert, alert.group_name])
        }

        violation[{"msg": msg}] {
          alert := alert_rule[_]
          # warn if we don't have something in labels.tier
          not regex.match("\\S", object.get(alert.rule.labels, "tier", ""))
          msg := sprintf("rule %s in group %s does not have labels.tier", [alert.rule.alert, alert.group_name])
        }

        violation[{"msg": msg}] {
          alert := alert_rule[_]
          # warn if we don't have something in annotations.description
          not regex.match("\\S", object.get(alert.rule.annotations, "description", ""))
          msg := sprintf("rule %s in group %s does not have annotations.description", [alert.rule.alert, alert.group_name])
        }

        violation[{"msg": msg}] {
          alert := alert_rule[_]
          # warn if we don't have something in annotations.summary
          not regex.match("\\S", object.get(alert.rule.annotations, "summary", ""))
          msg := sprintf("rule %s in group %s does not have annotations.summary", [alert.rule.alert, alert.group_name])
        }
