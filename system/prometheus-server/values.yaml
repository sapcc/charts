global:
  # The OpenStack region.
  region:

  # The TLD as used in the URL.
  domain:

  # Optional type of the cluster to which the Prometheus is deployed.
  # Choose between: controlplane, kubernikus-controlplane, kubernikus-scaleout.
  # clusterType:

  # Optional name of the cluster to which the Prometheus is deployed.
  # Defaults to region if not set.
  # cluster:

# The repository and tag of the Prometheus image.
image:
  repository: prom/prometheus
  tag: v2.9.2

# Mandatory name for this Prometheus.
# The name is used to find relevant aggregation and alerting rules.
# Examples: kubernetes, openstack, infrastructure, maia, etc.
name:

# Defines how long data is stored. Format: `[0-9]+(ms|s|m|h|d|w|y)`
retentionTime: 7d

# Reference a secret containing additional Prometheus scrape configurations.
# Injecting an invalid configuration might break the Prometheus server instance.
additionalScrapeConfigs:
  # Name of the secret.
  # name:

  # Key in the secret.
  # key:

  # Specify whether the Secret is optional.
  # Setting `optional: false` causes an error when the secret does not exist.
  # optional: true

# Interval between consecutive scrapes.
scrapeInterval: "60s"

# List of configmaps in the same namespace as the Prometheus that should be mounted to /etc/prometheus/configmaps/<configmap-name>.
# Can be used to add targets found by a custom service discovery.
configMaps: []
  # - < name of configmap >

# List of secrets in the same namespace as the Prometheus that should be mounted to /etc/prometheus/secrets/<secret-name>.
secrets: []
# - < name of secret >

# List of Alertmanagers (AM) to send alerts to.
# If multiple AMs are used in HA, alerts must be send to every AM.
alertmanagers: []
  # - alertmanager1.tld
  # - alertmanager2.tld

# Optional ingress for this Prometheus.
ingress:
  enabled: false

  # The name is used to generate the external URL Prometheus will be available under: <host>.<region>.<domain>.
  # If the ingress is enabled, it's also used for the ingress host.
  host:

  # Per default the host name is generated following the pattern `<host>.<region>.<domain>.
  # However the full host name can be set explicitly via the hostNameOverride parameter.
  # hostNameOverride: something.subDomain.tld

  # Automate certificate management via vice-president.
  vice_president: true

  # Automate DNS management via disco.
  disco: true

  # Client certificate authentication on ingress level.
  authentication:
    enabled: true
    # The key (<namespace>/<name>) of the secret containing the CA certificate (`ca.crt`) that is enabled to authenticate against this Ingress.
    authTLSSecret: kube-system/ingress-cacrt

    # The validation depth between the provided client certificate and the certification authority chain.
    authTLSVerifyDepth: 3

    # Enables verification of client certificates.
    authTLSVerifyClient: on

  # Additional annotations for the ingress.
  annotations: {}

# Enable persistent storage.
# If disabled, data will be stored in memory.
persistence:
  enabled: false

  # Optional name of the PVC. Default: < .Values.name >
  # name:

  # Access mode of the PVC.
  accessMode: ReadWriteOnce

  # Size of the PVC.
  size: 100Gi

  # Label selector to be be applied to the PVC.
  selector: {}

# Create RBAC resources.
rbac:
  create: true

# ServiceAccount to use for the Prometheus server.
serviceAccount:
  create: true

  # Optional name of the service account.
  # If not provided one will be generated in the format: prometheus-<name>.
  name:

# Thanos configuration.

thanos:
  # Enable Thanos components and Prometheus sidecar.
  enabled: false

  # DNS name for Thanos to discover peers through.
  # If `thanos.spec.peers` is set this values is ignored
  # Defaults to `thanos-peers.{{ .Release.Namespace }}.svc:10900`
  peers: ""

  # Configuration for OpenStack Swift Thanos storage backend.
  swiftStorageConfig: {}
    # authURL:
    # userName:
    # userDomainName:
    # password:
    # domainName:
    # projectName:
    # projectDomainName:
    # regionName:
    # containerName:

    # Currently not supported are:
    # tenantID:
    # domainID:
    # userID:

  objectStorageConfig:
    # Note:
    # The name of the secret specified below will be prefixed with `prometheus-<name>`
    # to avoid multiple configurations with the same name.
    name: thanos-storage-config
    key: thanos.yaml
    optional: true

  # See https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#thanosspec .
  spec:
    image: "sapcc/thanos:v0.4.0-2-ga680c93"

# The labels to add to any time series or alerts when communicating with
# external systems (federation, remote storage, Alertmanager).
externalLabels: {}
  # labelName: labelValue

# The log level of the Prometheus.
logLevel: info

# Kubernetes resource requests and limits for this Prometheus.
# See: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container .
resources:
  requests:
    cpu: 4
    memory: 8Gi

# A security context defines privilege and access control settings for a Pod or Container.
# See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context .
securityContext:
  fsGroup: 0
  runAsUser: 0

# Enabled default Prometheus Service Discoveries (SD).
# The relabeling allows the actual service scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/scrape`:   Only scrape services that have a value of `true`
# * `prometheus.io/targets`:  List of target Prometheis by which the metrics should be scraped.
# * `prometheus.io/scheme`:   If the metrics endpoint is secured then you will need to set this to `https` & most likely set the `tls_config` of the scrape config.
# * `prometheus.io/path`:     If the metrics path is not `/metrics` override this.
# * `prometheus.io/port`:     If the metrics are exposed on a different port to the service then set this appropriately.
serviceDiscoveries:
  # Targets found via SD are only kept if the `prometheus.io/targets` annotation matches the name of this Prometheus.
  # However this can be overridden using the following parameter.
  # The result is a regex like `.*$prometheusName.*|.*$additionalTargets[i].*`
  # additionalTargets:
  #   - ...

  # SD for Kubernetes services and endpoints.
  endpoints:
    enabled: true

  # SD for Kubernetes Pods. See https://github.com/coreos/prometheus-operator/issues/38.
  pods:
    enabled: false

# The pod's tolerations.
# See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration
tolerations: []
